#!/bin/zsh

set -eo pipefail

#####################
### CONFIGURATION ###
#####################

# Some backup variables
MAX_AGE="90D" # how old should files get to?
FULL_FREQ="30D" # how often should we do a full backup

# Get Backblaze B2 credentials and variables
# We use `jq` to url-encode the keys
B2_ACCOUNT=$(secret-tool lookup Path backblaze-b2-keyid | jq -sRr @uri)
B2_KEY=$(secret-tool lookup Path backblaze-b2-appkey | jq -sRr @uri)
B2_BUCKET=$(secret-tool lookup Path backblaze-b2-bucket-name)
B2_DIR="backups/home"

# Backup my home folder
BACKUP_DIR="/home/gideon"

# Use an allowlist rather than a blocklist
# This is because there can be so much accumulated crap that I only want
# to backup the good stuff.
INCLUDES_FILE="${HOME}/.config/duplicity/backups-include.txt"
if [[ ! -e ${INCLUDES_FILE} ]]; then
  echo "[!] inclusion list ${INCLUDES_FILE} not found! Exiting!"
  exit 110
fi

# GPG Key for Encryption and Signing
# Public key IDs (last eight characters)
ENC_KEY_ID=$(secret-tool lookup Path backup-encryption-key-id)
SGN_KEY_ID=$(secret-tool lookup Path backup-signing-key-id)
export PASSPHRASE=$(secret-tool lookup Path backup-encryption-key-passphrase)
export SIGN_PASSPHRASE=$(secret-tool lookup Path backup-signing-key-passphrase)

###############
### SCRIPT  ###
###############

function log() {
  echo "[info] $1";
}

function cleanup() {
  log "Cleaning up failures"
  duplicity \
    cleanup --force \
    --sign-key ${SGN_KEY_ID} --encrypt-key ${ENC_KEY_ID} \
    ${B2_URL}
}

B2_URL="b2://${B2_ACCOUNT}:${B2_KEY}@${B2_BUCKET}/${B2_DIR}"

log "--- BACKING UP ${BACKUP_DIR} ---"
log "Including ${FILES}"
log "Encrypting with ${ENC_KEY_ID}"
log "Signing with ${SGN_KEY_ID}"

# Remove files older than 90 days
log "Removing files older than ${MAX_AGE}"
duplicity \
  --sign-key ${SGN_KEY_ID} --encrypt-key ${ENC_KEY_ID} \
  remove-older-than ${MAX_AGE} --force \
  ${B2_URL}

# Backup incrementally, with a full backup every 30 days
if [[ -v 1 && $1 == "--full" ]]; then
  log "Performing full backup (--full is set)"
  eval "duplicity full \
    --progress \
    --include-filelist ${INCLUDES_FILE} \
    --exclude '**' \
    --sign-key ${SGN_KEY_ID} --encrypt-key ${ENC_KEY_ID} \
    ${BACKUP_DIR} ${B2_URL}"

  cleanup
elif [[ -v 1 && $1 == "--clean" ]]; then
  cleanup;
else
  if [[ -v 1 && $1 == "--progress" ]]; then
    SHOW_PROGRESS="--progress";
  else
    SHOW_PROGRESS="";
  fi
  log "Performing backup (full if older than ${FULL_FREQ})"
  eval "duplicity ${SHOW_PROGRESS} \
    --include-filelist ${INCLUDES_FILE} \
    --exclude '**' \
    --sign-key ${SGN_KEY_ID} --encrypt-key ${ENC_KEY_ID} \
    --full-if-older-than ${FULL_FREQ} \
    ${BACKUP_DIR} ${B2_URL}"

  cleanup
fi

# Show collection-status
log "Showing collection status"
duplicity collection-status \
  --sign-key ${SGN_KEY_ID} --encrypt-key ${ENC_KEY_ID} \
  ${B2_URL}

# Cleanup variables
unset B2_ACCOUNT
unset B2_KEY
unset B2_BUCKET
unset ENC_KEY_ID
unset SGN_KEY_ID
unset PASSPHRASE
unset SIGN_PASSPHRASE

# Done!
log "--- BACKUP OF ${BACKUP_DIR} COMPLETE ---"
