# NVM is really slow to load, so let's only get it when we need it
function nvm() {
    . `brew --prefix nvm`/nvm.sh;
    nvm "$@";
}

# Create a new directory and enter it
function md() {
    mkdir -p "$@" && cd "$@"
}

# create sha 256 fingerprint of a cert/key file
function shaprint() {
    openssl x509 -in "$1" -noout -fingerprint -sha256 | cut -f2 -d= | sed s/://g | awk '{ print tolower }'
}

function slack() {
    channel=$1;
    message=$2;
    http_status=$(curl -X POST https://slack.com/api/chat.postMessage -d token=$SLACK_TOKEN -d as_user=true -d channel="$channel" -d text="$message" -o /dev/null -s -w "${http_code}");

    (test "$http_status" -lt 400) && echo "sent message to $channel ðŸ˜Ž" || echo "failed to send message to $channel ðŸ˜ž";
}

function pywork() {
    env=$1
    if [ "$env" -eq "" ]; then env="env"; fi
    source "$env/bin/activate"
    PATH="$VIRTUAL_ENV/bin:$PATH"
}

function converge() {
    if [[ $1 == "-h" ]]; then
        echo "converge [method] path [other curl options]";
        return 0
    fi

    HTTP_METHOD=${(U)1};
    API_AUTH="Authorization: $CONVERGE_AUTH";
    HTTP_MIME="Content-Type: application/json";
    if [[ $HTTP_METHOD == "GET" || $HTTP_METHOD == "PUT" || $HTTP_METHOD == "POST" || $HTTP_METHOD == "DELETE" ]]; then
        CONVERGE_PATH="$2";
        shift;
    else
        HTTP_METHOD="GET"
        CONVERGE_PATH=$1
    fi
    shift;
    curl -X $HTTP_METHOD -H "$API_AUTH" -H "$HTTP_MIME" "https://api.converge.io/$CONVERGE_PATH" $@
}

function converge_db() {
    ENV="staging"
    if [[ $1 == "production" || $1 == "staging" ]]; then
      ENV=$1
      shift
    fi
    DB=$1
    shift

    if [[ ! ($ENV == "production" || $ENV == "staging") ]]; then
      echo "Unknown environment $ENV" >&2
      return 101
    fi

    CONFIG="/home/gideon/converge/secrets/db-ro.${ENV}.${DB}.env"
    if [[ ! -e "$CONFIG" ]]; then
      echo "No such config file ${CONFIG}!" >&2
      return 102
    fi
    (
      echo "Loading configuration from ${CONFIG}..." >&2
      . ${CONFIG}
      echo "--- Connecting to ${DB}.${ENV} at ${USER}@${ADDR}:${PORT} ---" >&2
      PGPASSWORD=$PASS psql -h $ADDR -p $PORT -U $USER -d $DATABASE $@
    )
}

function urlencode() {
    echo "$1" | python -c 'import sys,urllib; print urllib.quote(sys.stdin.read().strip())';
}

function md_to_pdf() {
    input=$1
    output=$2
    if [ "$input" == "" ]; then echo "usage md_to_pdf INPUT [OUTPUT]"; return; fi;
    if [ "$output" == "" ]; then output="$input.pdf"; fi;
    pandoc --from=markdown --latex-engine=xelatex -o "$output" "$input"
}

function note() {
    # TODO: make "project" optional, make esc cancel the opening process
    if [[ $1 == "" || $1 == "-h" ]]; then
        echo "USAGE: note command [args]"
        echo "Commands: add search list"
        echo "note add project [title] : add a new note to a project"
        echo "note search project terms : search notes for terms"
        echo "note open project : list all notes in a project (or just all notes)"
        return
    fi

    ROOT="$HOME/notes"
    cmd=$1
    project=$2

    if [[ ($project != "") && (! -d "$ROOT/$project") ]]; then
        echo "\"$project\" is not a project I know about!"
        return 101
    fi

    if [[ $project == "" ]]; then
        echo "Need a project to be specified!"
        return 102
    fi

    if [[ $cmd == "add" ]]; then
        title=$3
        fname="$(date +"%Y-%m-%d")"
        if [[ $title != "" ]]; then
            fname="$fname $title"
        fi
        nvim "$ROOT/$project/$fname.md"
        return 0
    fi

    if [[ $cmd == "search" ]]; then
        term=$3
        (cd "$ROOT/$project" && nvim "$(ag --noheading --nonumbers --nobreak $term | fzf | cut -d : -f 1)")
        return 0
    fi

    if [[ $cmd == "open" ]]; then
        (cd "$ROOT/$project" && nvim "$(fzf)")
        return 0
    fi
}

function 1p_get_session {
  session_file=$HOME/.local/share/1password/$1.session;
  if [[ ! -d $(dirname "$session_file") ]]; then mkdir -p $(dirname "$session_file"); fi
  new_session=1
  if [[ -f $session_file ]]; then
    now=$(date +%s)
    touched=$(stat $session_file | awk '/Modify/{print $2 " " $3}' | xargs -I str_date date -d "str_date" +%s)
    if $( (($now - $touched < 1600)) ); then
      new_session=0
    fi
  fi
  if $( (( $new_session > 0 )) ); then
    op signin $1 > $session_file
  fi
  cat $session_file
}

function 1p {
  selector="password"
  if [[ -v 2 ]]; then selector="$2"; fi
  eval "$(1p_get_session $1)"
  result=$(op list items | jq '.[] | .uuid + ":" + .overview.title' -- | tr -d '"' | fzf -d ":" --with-nth=2 | cut -d ':' -f 1);
  case "$selector" in
    password)
      op get item $result --fields password
      ;;
    totp)
      op get totp $result
      ;;
    *)
      echo "Invalid selector $selector {password|totp}"
      exit 1
      ;;
  esac
}

# Set the active window title in X
function setwindowname {
  xdotool set_window --name "$*" `xdotool getactivewindow`
}
